services:
  # Konfiguration für den Publisher-Service.
  stock-publisher:
    image: your-dockerhub-username/stock-publisher
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: stockmarket
      RABBITMQ_DEFAULT_PASS: password
  # Konfiguration für die MongoDB mit Replikation.
  mongo1:
    image: mongo:7.0
    ports:
      - "27017:27017" 
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    extra_hosts:
      - "host.docker.internal:host-gateway"   
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 0s

  mongo2:
    image: mongo:7.0
    ports:
      - "27018:27018"  
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    extra_hosts:
      - "host.docker.internal:host-gateway"    
    volumes:
     - "mongo2_data:/data/db"
     - "mongo2_config:/data/configdb"

  mongo3:
    image: mongo:7.0
    ports:
      - "27019:27019"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
     - "mongo3_data:/data/db"
     - "mongo3_config:/data/configdb"


  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      -80:80
    dependes_on:
      -frontend1
      -frontend2

volumes:
  mongo1_data:
  mongo1_config:  
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config: